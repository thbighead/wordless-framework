<?php

namespace Wordless\Infrastructure\Http\Response\Enums;

use Symfony\Component\HttpFoundation\Response;
use Wordless\Application\Helpers\Str;

enum StatusCode: int
{
    case CONTINUE_100 = Response::HTTP_CONTINUE;
    case SWITCHING_PROTOCOLS_101 = Response::HTTP_SWITCHING_PROTOCOLS;
    case PROCESSING_102 = Response::HTTP_PROCESSING; // RFC2518
    case EARLY_HINTS_103 = Response::HTTP_EARLY_HINTS;
    case OK_200 = Response::HTTP_OK;
    case CREATED_201 = Response::HTTP_CREATED;
    case ACCEPTED_202 = Response::HTTP_ACCEPTED;
    case NON_AUTHORITATIVE_INFORMATION_203 = Response::HTTP_NON_AUTHORITATIVE_INFORMATION;
    case NO_CONTENT_204 = Response::HTTP_NO_CONTENT;
    case RESET_CONTENT_205 = Response::HTTP_RESET_CONTENT;
    case PARTIAL_CONTENT_206 = Response::HTTP_PARTIAL_CONTENT;
    case MULTI_STATUS_207 = Response::HTTP_MULTI_STATUS; // RFC4918
    case ALREADY_REPORTED_208 = Response::HTTP_ALREADY_REPORTED; // RFC5842
    case IM_USED_226 = Response::HTTP_IM_USED; // RFC3229
    case MULTIPLE_CHOICES_300 = Response::HTTP_MULTIPLE_CHOICES;
    case MOVED_PERMANENTLY_301 = Response::HTTP_MOVED_PERMANENTLY;
    case FOUND_302 = Response::HTTP_FOUND;
    case SEE_OTHER_303 = Response::HTTP_SEE_OTHER;
    case NOT_MODIFIED_304 = Response::HTTP_NOT_MODIFIED;
    case USE_PROXY_305 = Response::HTTP_USE_PROXY;
    case RESERVED_306 = Response::HTTP_RESERVED;
    case TEMPORARY_REDIRECT_307 = Response::HTTP_TEMPORARY_REDIRECT;
    case PERMANENTLY_REDIRECT_308 = Response::HTTP_PERMANENTLY_REDIRECT; // RFC7238
    case BAD_REQUEST_400 = Response::HTTP_BAD_REQUEST;
    case UNAUTHORIZED_401 = Response::HTTP_UNAUTHORIZED;
    case PAYMENT_REQUIRED_402 = Response::HTTP_PAYMENT_REQUIRED;
    case FORBIDDEN_403 = Response::HTTP_FORBIDDEN;
    case NOT_FOUND_404 = Response::HTTP_NOT_FOUND;
    case METHOD_NOT_ALLOWED_405 = Response::HTTP_METHOD_NOT_ALLOWED;
    case NOT_ACCEPTABLE_406 = Response::HTTP_NOT_ACCEPTABLE;
    case PROXY_AUTHENTICATION_REQUIRED_407 = Response::HTTP_PROXY_AUTHENTICATION_REQUIRED;
    case REQUEST_TIMEOUT_408 = Response::HTTP_REQUEST_TIMEOUT;
    case CONFLICT_409 = Response::HTTP_CONFLICT;
    case GONE_410 = Response::HTTP_GONE;
    case LENGTH_REQUIRED_411 = Response::HTTP_LENGTH_REQUIRED;
    case PRECONDITION_FAILED_412 = Response::HTTP_PRECONDITION_FAILED;
    case REQUEST_ENTITY_TOO_LARGE_413 = Response::HTTP_REQUEST_ENTITY_TOO_LARGE; // RFC-ietf-httpbis-semantics
    case REQUEST_URI_TOO_LONG_414 = Response::HTTP_REQUEST_URI_TOO_LONG;
    case UNSUPPORTED_MEDIA_TYPE_415 = Response::HTTP_UNSUPPORTED_MEDIA_TYPE;
    case REQUESTED_RANGE_NOT_SATISFIABLE_416 = Response::HTTP_REQUESTED_RANGE_NOT_SATISFIABLE;
    case EXPECTATION_FAILED_417 = Response::HTTP_EXPECTATION_FAILED;
    case I_AM_A_TEAPOT_418 = Response::HTTP_I_AM_A_TEAPOT; // RFC2324
    case MISDIRECTED_REQUEST_421 = Response::HTTP_MISDIRECTED_REQUEST; // RFC7540
    case UNPROCESSABLE_ENTITY_422 = Response::HTTP_UNPROCESSABLE_ENTITY; // RFC-ietf-httpbis-semantics
    case LOCKED_423 = Response::HTTP_LOCKED; // RFC4918
    case FAILED_DEPENDENCY_424 = Response::HTTP_FAILED_DEPENDENCY; // RFC4918
    case TOO_EARLY_425 = Response::HTTP_TOO_EARLY; // RFC-ietf-httpbis-replay-04
    case UPGRADE_REQUIRED_426 = Response::HTTP_UPGRADE_REQUIRED; // RFC2817
    case PRECONDITION_REQUIRED_428 = Response::HTTP_PRECONDITION_REQUIRED; // RFC6585
    case TOO_MANY_REQUESTS_429 = Response::HTTP_TOO_MANY_REQUESTS; // RFC6585
    case REQUEST_HEADER_FIELDS_TOO_LARGE_431 = Response::HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE; // RFC6585
    case UNAVAILABLE_FOR_LEGAL_REASONS_451 = Response::HTTP_UNAVAILABLE_FOR_LEGAL_REASONS; // RFC7725
    case INTERNAL_SERVER_ERROR_500 = Response::HTTP_INTERNAL_SERVER_ERROR;
    case NOT_IMPLEMENTED_501 = Response::HTTP_NOT_IMPLEMENTED;
    case BAD_GATEWAY_502 = Response::HTTP_BAD_GATEWAY;
    case SERVICE_UNAVAILABLE_503 = Response::HTTP_SERVICE_UNAVAILABLE;
    case GATEWAY_TIMEOUT_504 = Response::HTTP_GATEWAY_TIMEOUT;
    case VERSION_NOT_SUPPORTED_505 = Response::HTTP_VERSION_NOT_SUPPORTED;
    case VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL_506 = Response::HTTP_VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL; // RFC2295
    case INSUFFICIENT_STORAGE_507 = Response::HTTP_INSUFFICIENT_STORAGE; // RFC4918
    case LOOP_DETECTED_508 = Response::HTTP_LOOP_DETECTED; // RFC5842
    case NOT_EXTENDED_510 = Response::HTTP_NOT_EXTENDED; // RFC2774
    case NETWORK_AUTHENTICATION_REQUIRED_511 = Response::HTTP_NETWORK_AUTHENTICATION_REQUIRED; // RFC6585

    public function asText(): string
    {
        return Str::titleCase(Str::beforeLast($this->name, '_'));
    }
}
